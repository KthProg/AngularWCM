<?php

if(isset($_POST["Function"]) || isset($_GET["Function"])){
    $func = isset($_POST["Function"]) ? $_POST["Function"] : $_GET["Function"];
    switch($func){
        case "Open":
            open();
            break;
        case "getMaxID":
            getMaxID();
            break;
        case "saveImage":
            saveImage();
            break;
        case "Submit":
            submit();
            break;
        case "Update":
            update();
            break;
    }
}

function getMaxID() {
    if(isset($_POST["Form"])){
        $form_data = json_decode($_POST["Form"]);
        
        $conn = get_connection($form_data->Connection);

        $query = "SELECT MAX({$form_data->PK}) FROM {$form_data->Table}";
        $query = ms_escape_string($query);

        if($conn){
            $stmt = $conn->prepare($query);
        }else{
            exit("-1");
        }

        if(!$stmt->execute()){
            // failed to execute, table or primary key incorrect
            exit("-1");
        }
        
        if($row = $stmt->fetch(PDO::FETCH_NUM)){
            // executed and row returned
            // first column (only column) has max pk
            echo $row[0];
        }else{
            // empty result set
            exit("-1");
        }
    }
}

function open(){
    if(isset($_POST["Form"]) || isset($_GET["Form"])){
        $form_json = isset($_POST["Form"]) ? $_POST["Form"] : $_GET["Form"];
        $form_data = json_decode($form_json);
        
        $query = "SELECT * FROM {$form_data->Table} WHERE {$form_data->OpenBy}=?";
        $query = ms_escape_string($query);
        $conn = get_connection($form_data->Connection);
        if($conn){
            $stmt = $conn->prepare($query);
        }else{
            return;
        }
        
        if(!$stmt->execute(array($form_data->OpenByValue))){
            send_error($stmt->errorInfo());
            return;
        }
        
        if($rows = $stmt->fetchAll(PDO::FETCH_ASSOC)){
            echo json_encode($rows);
        }
    }
}

function send_error($error_info){
    notify("wcm-500dx.external_tasks.1163497.hooks@reply.redbooth.com", "An error occurred.", "GET: ".print_r($_GET, true)."<br>POST: ".print_r($_POST, true)."<br>ERROR: ".print_r($error_info, true));
}

function saveImage() {
    if(isset($_POST["Image"], $_POST["FileName"], $_POST["Name"], $_POST["ID"], $_POST["Line"])){
        
        $upload_dir = "..\\..\\uploads\\";
        $is_dir = is_dir($upload_dir);
        $is_writeable = is_writable($upload_dir);
        
        if($is_dir && $is_writeable){
            $data = get_image_data_from_js_base64($_POST["Image"]);
            
            $file = $_POST["Name"]."_".$_POST["ID"]."_".$_POST["Line"]."_".$_POST["FileName"];
            $file = $upload_dir.str_replace(" ", "_", $file);
            
            $success = file_put_contents($file, $data);
            $uploaded = !($success === false);
        }else{
            $uploaded = false;
        }
        
        echo $uploaded ? "Successfully uploaded." :  "Upload unsuccessful.";
    }
}

function get_image_data_from_js_base64($image_data){
    // split base 64 encoded string around data boundary
    $split_img = explode(";base64,", $image_data);
    // get just the image data
    $base64img = $split_img[1];
    // base 64 strings generated by javascript must
    // have ' ' replaced with '+' or they will be
    // considered corrupt by php
    $base64img = str_replace(" ", "+", $base64img);
    $data = base64_decode($base64img);
    return $data;
}

function submit() {
    $form = json_decode($_POST["Form"]);
    execute_query_upload_files_and_notify("prepare_inserts", $form->Name." number ".$form->tables[0]->ID." submitted.", $form->Name." number ".$form->tables[0]->ID." not submitted.");
}

function update() {
    $form = json_decode($_POST["Form"]);
    execute_query_upload_files_and_notify("prepare_updates", $form->Name." number ".$form->tables[0]->ID." updated.", $form->Name." number ".$form->tables[0]->ID." not updated.");
}

// uses xpath to create a connection by name from an XML file
function get_connection($connection_name){
    $con = (string)$connection_name;
    
    $xml = simplexml_load_file("http://192.9.200.62/xml/connections.xml");
    $con_nodes = $xml->xpath("/connections/connection[@name='".$con."']");
    $con_data = $con_nodes[0];

    try{
        $conn = new PDO("sqlsrv:Server=".$con_data->host."; Database=".$con_data->database, $con_data->user, $con_data->password);
        return $conn;
    }
    catch(PDOException $e){
        echo $e->getMessage();
        return false;
    }
}

// this is from stackoverflow
function ms_escape_string($data) {
    if (!isset($data) or empty($data)){
        return '';
    }
    if (is_numeric($data)){
        return $data;
    }
    $non_displayables = array(
        '/%0[0-8bcef]/',            // url encoded 00-08, 11, 12, 14, 15
        '/%1[0-9a-f]/',             // url encoded 16-31
        '/[\x00-\x08]/',            // 00-08
        '/\x0b/',                   // 11
        '/\x0c/',                   // 12
        '/[\x0e-\x1f]/'             // 14-31
    );
    foreach ( $non_displayables as $regex ){
        $data = preg_replace( $regex, '', $data );
    }
    $data = str_replace("'", "''", $data );
    return $data;
}

// ... does what it says...
// the update and submit code both call this with different $query_funcs
function execute_query_upload_files_and_notify($query_func, $success, $failure){
    if(!isset($_POST["Form"])){
        send_error(array("Page opened directly."));
        exit("Please do not try to refresh this page, or to go to this page directly.");
    }
    
    $form = json_decode($_POST["Form"]);
    $conn = get_connection($form->tables[0]->Connection);
    
    $queries = $query_func();
    $all_successful = true;
    
    foreach($queries as $query){
            $stmt = $conn->prepare($query["Query"]);
            
            if($stmt->execute($query["Values"])){
                echo $success."<br>";
                $all_successful = $all_successful && true;
            }else{
                echo $failure."<br>";
                $all_successful = false;
                send_error(array("Error:" => $stmt->errorInfo(), "Query:" => $query));
                echo "<pre>";
                print_r($stmt->errorInfo());
                print_r($query);
                echo "</pre>";
                exit();
            }
    }
    
    if($all_successful){
        insert_notification($success, $form->EmailBody);
    }
}

// another script sends the emails every 5 minutes
// this is to prevent browsers hanging on mobile devices
function insert_notification($subject, $body){
    $conn = get_connection("Safety");
    $stmt = $conn->prepare("INSERT INTO Emails (Subj, Body) VALUES(?, ?)");
    if($stmt->execute(array($subject, $body))){
        echo "Email query executed (Email will send in 0-5 minutes)<br>";
    }else{
        echo "Email query not executed<br>";
    }
}

function prepare_inserts(){
    $queries = array();
    $form = json_decode($_POST["Form"]);
    foreach($form->tables as $table){
        for($i = 0, $l = count($table->records); $i < $l; ++$i){
            $values = array();
            $record = $table->records[$i];
            $query = record_to_insert_sql($table, $record, array($table->PK, $table->OpenBy));
            $values = record_to_values($record, array($table->PK, $table->OpenBy));
            $queries[] = array("Query" => ms_escape_string($query), "Values" => $values, "Table" => $table->Table);
        }
        if($table->IsMain != true){
            $queries[] = array("Query" => ms_escape_string("UPDATE {$table->Table} SET [{$table->OpenBy}] = (SELECT MAX([{$form->tables[0]->PK}]) FROM {$form->tables[0]->Table}) WHERE [{$table->OpenBy}] IS NULL"), "Values" => array(), "Table" => $table->Table);
        }
    }
    return $queries;
}

function prepare_updates(){
    $queries = array();
    $form = json_decode($_POST["Form"]);
    foreach($form->tables as $table){
        for($i = 0, $l = count($table->records); $i < $l; ++$i){
            $values = array();
            $record = $table->records[$i];
            $query = "";
            if(record_is_new($table, $record)){
                $query = record_to_insert_sql($table, $record, array($table->PK));
                $values = record_to_values($record, array($table->PK));
            } else {
                $query = record_to_update_sql($table, $table->records[0], array($table->PK));
                $values = record_to_values($record, array());
            }
            $queries[] = array("Query" => ms_escape_string($query), "Values" => $values, "Table" => $table->Table);
        }
    }
    return $queries;
}

function record_to_insert_sql($table, $record, $skip){
    $cols = "";
    $vals = "";
    $query = "INSERT INTO {$table->Table} ";
    foreach($record->fields as $field){
        if(in_array($field->name, $skip)){
            continue;
        }
        $cols .= "[".$field->name."],";
        $vals .= ":".$field->name.",";
    }
    $cols = substr($cols, 0, strlen($cols) - 1);
    $vals = substr($vals, 0, strlen($vals) - 1);
    $query .= "(".$cols.") VALUES (".$vals.")";
    return $query;
}

function record_to_update_sql($table, $record, $skip){
    $query = "UPDATE {$table->Table} SET ";
    $values[] = array();
    foreach($record->fields as $field){
        if(in_array($field->name, $skip)){
            continue;
        }
        $query .= "[".$field->name."]=:".$field->name.",";
    }
    $query = substr($query, 0, strlen($query) - 1);
    $query .= " WHERE {$table->PK}=:{$table->PK}";
    return $query;
}

function record_to_values($record, $skip){
    $values = array();
    foreach($record->fields as $field){
        if(in_array($field->name, $skip)){
            continue;
        }
        // set to null if the value is not defined
        $values[$field->name] = $field->value;
    }
    return $values;
}

function record_is_new($table, $record){
    foreach($record->fields as $field){
        if($field->name == $table->PK){
            return ($field->value == null);
        }
    }
    return false;
}

// another script sends the emails every 5 minutes
// this is to prevent browsers hanging on mobile devices
function notify($contacts, $subject, $body){
    $conn = get_connection("Safety");
    $stmt = $conn->prepare("INSERT INTO Emails (Contacts, Subj, Body) VALUES(?, ?, ?)");
    if($stmt->execute(array($contacts, $subject, $subject."<br>".$body))){
        echo "Email query executed (Email will send in 0-5 minutes)<br>";
    }else{
        echo "Email query not executed<br>";
    }
}

?>